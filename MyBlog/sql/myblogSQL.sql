-- MySQL dump 10.13  Distrib 5.5.55, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	5.5.55-0+deb7u1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `about`
--

DROP TABLE IF EXISTS `about`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `about` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `summary` varchar(500) DEFAULT NULL COMMENT '网站概要',
  `skill` varchar(1000) DEFAULT NULL COMMENT '使用到的技术',
  `creed` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `about`
--

LOCK TABLES `about` WRITE;
/*!40000 ALTER TABLE `about` DISABLE KEYS */;
INSERT INTO `about` VALUES (1,'这是一个我业余时间练手的个人博客站，有空的时候会在这里更新博客。使用ssm框架开发，服务器使用的是vultr的vps,服务器系统是debian7。域名注册使用的是阿里万网，如果您对技术方面感兴趣或者发现了bug可以加我的微信与我详谈，扫描左边的二维码就可以加我微信啦!ps:如果您是hr的话请查看置顶博客里面有进入后台管理的账号密码。<a href=\"https://github.com/mrwang33/MyBlog\" title=\"github\">点击这里</a>查看项目原代码','<p>主要框架:springmvc,spring,mybatis</p>\r\n<p>开发工具:myeclipse</p>\r\n<p>数据库:mysql</p>\r\n<p>项目管理工具:maven</p>\r\n<p>分布式版本控制系统:git</p>\r\n<p>权限控制框架:shiro</p>\r\n<p>java版本:jdk1.7</p>\r\n<p>tomcat版本:tomcat7</p>\r\n<p>前端框架:jquery bootstrap</p>\r\n<p>富文本编辑器:ueditor</p>','修身治国平天下，洗脸刷牙敲代码');
/*!40000 ALTER TABLE `about` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `article_title` varchar(100) NOT NULL COMMENT '文章标题',
  `article_id` varchar(32) NOT NULL,
  `article_date` datetime NOT NULL COMMENT '发表时间',
  `article_keywords` varchar(50) DEFAULT NULL,
  `article_views` int(11) DEFAULT NULL COMMENT '浏览次数',
  `article_stars` int(11) DEFAULT NULL COMMENT '博客点赞数',
  `article_content` longtext COMMENT '博客内容',
  `art_clas` int(11) DEFAULT NULL COMMENT '文章所属分类',
  `isStick` bit(1) DEFAULT NULL COMMENT '是否置顶 如果置顶该项为1 ',
  PRIMARY KEY (`article_id`),
  KEY `FK_art_classify` (`art_clas`),
  CONSTRAINT `FK_art_classify` FOREIGN KEY (`art_clas`) REFERENCES `classify` (`classify_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES ('s2sh框架整合','17e5fd787c174f1695995c0a2dd35a9d','2017-05-25 08:26:17','#struts#spring#hibernate',1,0,'<p>有一段时间没有用过struts了 感觉最近好像struts不如springmvc火了 但是也算是javaweb的基本功之一了还是不能忘了 来复习一下</p><p>还是使用myeclipse先新建web项目 添加maven支持<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;dependencies&gt;\r\n		&lt;!--&nbsp;log4j&nbsp;日志&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;log4j&lt;/groupId&gt;\r\n			&lt;artifactId&gt;log4j&lt;/artifactId&gt;\r\n			&lt;version&gt;1.2.17&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;servlet&nbsp;API&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;javax.servlet&lt;/groupId&gt;\r\n			&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\r\n			&lt;version&gt;3.1-b09&lt;/version&gt;\r\n			&lt;scope&gt;provided&lt;/scope&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;MySQL驱动&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;mysql&lt;/groupId&gt;\r\n			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n			&lt;version&gt;5.1.24&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;mchange&nbsp;C3P0&nbsp;数据源&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.mchange&lt;/groupId&gt;\r\n			&lt;artifactId&gt;c3p0&lt;/artifactId&gt;\r\n			&lt;version&gt;0.9.5-pre2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;junit&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;junit&lt;/groupId&gt;\r\n			&lt;artifactId&gt;junit&lt;/artifactId&gt;\r\n			&lt;version&gt;4.11&lt;/version&gt;\r\n			&lt;scope&gt;test&lt;/scope&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;fastjson&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\r\n			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;\r\n			&lt;version&gt;1.1.29&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;sf.json&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;\r\n			&lt;artifactId&gt;json-lib&lt;/artifactId&gt;\r\n			&lt;version&gt;2.4&lt;/version&gt;\r\n			&lt;classifier&gt;jdk15&lt;/classifier&gt;&lt;!--指定jdk版本&nbsp;--&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;struts2&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;\r\n			&lt;artifactId&gt;struts2-core&lt;/artifactId&gt;\r\n			&lt;version&gt;2.3.14&lt;/version&gt;\r\n			&lt;exclusions&gt;\r\n				&lt;exclusion&gt;\r\n					&lt;groupId&gt;javassist&lt;/groupId&gt;\r\n					&lt;artifactId&gt;javassist&lt;/artifactId&gt;\r\n				&lt;/exclusion&gt;\r\n			&lt;/exclusions&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;\r\n			&lt;artifactId&gt;struts2-spring-plugin&lt;/artifactId&gt;\r\n			&lt;version&gt;2.3.14&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.apache.struts&lt;/groupId&gt;\r\n			&lt;artifactId&gt;struts2-convention-plugin&lt;/artifactId&gt;\r\n			&lt;version&gt;2.3.14&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;spring&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-expression&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-orm&lt;/artifactId&gt;\r\n			&lt;version&gt;4.0.2.RELEASE&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;aspectjweaver&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.aspectj&lt;/groupId&gt;\r\n			&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\r\n			&lt;version&gt;1.7.2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;hibernate&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.hibernate&lt;/groupId&gt;\r\n			&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\r\n			&lt;version&gt;4.2.0.Final&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n	&lt;/dependencies&gt;</pre><p>然后配置web.xml<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;!--读取spring和hibernate配置文件--&gt;\r\n&lt;context-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:spring.xml,classpath:spring-hibernate.xml&lt;/param-value&gt;\r\n&nbsp;&nbsp;&lt;/context-param&gt;\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;&lt;!--&nbsp;spring&nbsp;监听器&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;listener&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\r\n&nbsp;&nbsp;&lt;/listener&gt;\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;&lt;!--&nbsp;Filter&nbsp;定义&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;!--&nbsp;Character&nbsp;Encoding&nbsp;filter&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;filter&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;init-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;encoding&lt;/param-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;UTF-8&lt;/param-value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/init-param&gt;\r\n&nbsp;&nbsp;&lt;/filter&gt;\r\n&nbsp;&nbsp;&lt;filter-mapping&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n&nbsp;&nbsp;&lt;/filter-mapping&gt;\r\n&nbsp;&nbsp;&lt;!--Hibernate的session丢失解决方法&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;filter&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;openSessionInView&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-class&gt;org.springframework.orm.hibernate4.support.OpenSessionInViewFilter&lt;/filter-class&gt;\r\n&nbsp;&nbsp;&lt;/filter&gt;\r\n&nbsp;&nbsp;&lt;filter-mapping&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;openSessionInView&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n&nbsp;&nbsp;&lt;/filter-mapping&gt;\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;&lt;!--&nbsp;struts2&nbsp;filter&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;filter&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;struts2&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;\r\n&nbsp;&nbsp;&lt;/filter&gt;\r\n&nbsp;&nbsp;&lt;filter-mapping&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;filter-name&gt;struts2&lt;/filter-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n&nbsp;&nbsp;&lt;/filter-mapping&gt;</pre><p>然后在src/main/resource 下新建spring.xml &nbsp;spring-hibernate.xml struts.xml</p><p>首先 是spring.xml的内容</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;引入属性文件&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:property-placeholder&nbsp;location=&quot;classpath:database.properties&quot;&nbsp;/&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;自动扫描dao和service包(自动注入)&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;com.test&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&lt;/beans&gt;</pre><p>然后是spring-hibernate.xml的内容<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop/spring-aop-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;使用C3P0数据源，MySQL数据库&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;dataSource&quot;&nbsp;class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destroy-method=&quot;close&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;MySQL5&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;driverClass&quot;&nbsp;value=&quot;${driverClassName}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;jdbcUrl&quot;&nbsp;value=&quot;${url}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;user&quot;&nbsp;value=&quot;${username}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;password&quot;&nbsp;value=&quot;${password}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxPoolSize&quot;&nbsp;value=&quot;40&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;minPoolSize&quot;&nbsp;value=&quot;1&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;initialPoolSize&quot;&nbsp;value=&quot;1&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxIdleTime&quot;&nbsp;value=&quot;20&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;session工厂&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;sessionFactory&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;dataSource&quot;&nbsp;ref=&quot;dataSource&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;packagesToScan&quot;&nbsp;value=&quot;com.test.entity&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hibernateProperties&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;props&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prop&nbsp;key=&quot;hibernate.hbm2ddl.auto&quot;&gt;${hibernate.hbm2ddl.auto}&lt;/prop&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prop&nbsp;key=&quot;hibernate.dialect&quot;&gt;${hibernate.dialect}&lt;/prop&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prop&nbsp;key=&quot;hibernate.show_sql&quot;&gt;${hibernate.show_sql}&lt;/prop&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;prop&nbsp;key=&quot;hibernate.format_sql&quot;&gt;${hibernate.format_sql}&lt;/prop&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/props&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;配置事务&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;name=&quot;txManager&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;sessionFactory&quot;&nbsp;ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;tx:annotation-driven&nbsp;transaction-manager=&quot;txManager&quot;&nbsp;/&gt;\r\n\r\n	&lt;bean&nbsp;id=&quot;hibernateTemplete&quot;&nbsp;class=&quot;org.springframework.orm.hibernate4.HibernateTemplate&quot;&gt;\r\n		&lt;property&nbsp;name=&quot;sessionFactory&quot;&nbsp;ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;\r\n	&lt;/bean&gt;\r\n&lt;/beans&gt;</pre><p>struts.xml的内容</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;struts&nbsp;PUBLIC\r\n	&quot;-//Apache&nbsp;Software&nbsp;Foundation//DTD&nbsp;Struts&nbsp;Configuration&nbsp;2.3//EN&quot;\r\n	&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\r\n\r\n&lt;struts&gt;\r\n	&lt;!--关闭动态方法访问&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;constant&nbsp;name=&quot;struts.enable.DynamicMethodInvocation&quot;&nbsp;value=&quot;false&quot;&nbsp;/&gt;\r\n	&lt;!--&nbsp;打开开发模式&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;constant&nbsp;name=&quot;struts.devMode&quot;&nbsp;value=&quot;true&quot;&nbsp;/&gt;\r\n	&lt;!--&nbsp;设置样式为simple(不添加任何样式)&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;constant&nbsp;name=&quot;struts.ui.theme&quot;&nbsp;value=&quot;simple&quot;&nbsp;/&gt;\r\n	&lt;!--&nbsp;.action不可省略&nbsp;--&gt;\r\n	&lt;constant&nbsp;name=&quot;struts.action.extension&quot;&nbsp;value=&quot;action&quot;&nbsp;/&gt;\r\n	&lt;include&nbsp;file=&quot;user-struts.xml&quot;&gt;&lt;/include&gt;\r\n&lt;/struts&gt;</pre><p>然后新建一个User实体类用于测试&nbsp;<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.test.entity;\r\n\r\nimport&nbsp;java.io.Serializable;\r\n\r\nimport&nbsp;javax.persistence.Entity;\r\nimport&nbsp;javax.persistence.GeneratedValue;\r\nimport&nbsp;javax.persistence.GenerationType;\r\nimport&nbsp;javax.persistence.Id;\r\n\r\n@Entity\r\npublic&nbsp;class&nbsp;User&nbsp;implements&nbsp;Serializable{\r\n	private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;8941012353272388061L;\r\n	private&nbsp;Integer&nbsp;id;\r\n	private&nbsp;String&nbsp;username;\r\n	private&nbsp;String&nbsp;password;\r\n	public&nbsp;User()&nbsp;{\r\n	}\r\n	public&nbsp;User(Integer&nbsp;id,&nbsp;String&nbsp;username,&nbsp;String&nbsp;password)&nbsp;{\r\n		super();\r\n		this.id&nbsp;=&nbsp;id;\r\n		this.username&nbsp;=&nbsp;username;\r\n		this.password&nbsp;=&nbsp;password;\r\n	}\r\n	@Id\r\n	@GeneratedValue(strategy&nbsp;=&nbsp;GenerationType.IDENTITY)\r\n	public&nbsp;Integer&nbsp;getId()&nbsp;{\r\n		return&nbsp;id;\r\n	}\r\n	public&nbsp;void&nbsp;setId(Integer&nbsp;id)&nbsp;{\r\n		this.id&nbsp;=&nbsp;id;\r\n	}\r\n	public&nbsp;String&nbsp;getUsername()&nbsp;{\r\n		return&nbsp;username;\r\n	}\r\n	public&nbsp;void&nbsp;setUsername(String&nbsp;username)&nbsp;{\r\n		this.username&nbsp;=&nbsp;username;\r\n	}\r\n	public&nbsp;String&nbsp;getPassword()&nbsp;{\r\n		return&nbsp;password;\r\n	}\r\n	public&nbsp;void&nbsp;setPassword(String&nbsp;password)&nbsp;{\r\n		this.password&nbsp;=&nbsp;password;\r\n	}\r\n	\r\n	\r\n	\r\n}</pre><p>由于hibernate.hbm2ddl.auto 配置了update 所以数据库不用新建表 hibernate会为我们自动生成 这是比mybatis方便的地方了</p><p>然后在新建UserDAO 和UserDAOImpl DAO中比较简单就不把代码贴出来了<br/></p><pre class=\"brush:xml;toolbar:false\">package&nbsp;com.test.dao.impl;\r\n\r\nimport&nbsp;java.util.List;\r\n\r\nimport&nbsp;javax.annotation.Resource;\r\n\r\nimport&nbsp;org.springframework.orm.hibernate4.HibernateTemplate;\r\nimport&nbsp;org.springframework.stereotype.Component;\r\n\r\nimport&nbsp;com.test.dao.UserDAO;\r\nimport&nbsp;com.test.entity.User;\r\n@Component\r\npublic&nbsp;class&nbsp;UserDAOImpl&nbsp;implements&nbsp;UserDAO{\r\n	@Resource\r\n	private&nbsp;HibernateTemplate&nbsp;hibernateTemplate;\r\n	\r\n	@Override\r\n	public&nbsp;List&lt;User&gt;&nbsp;getUser(User&nbsp;user)&nbsp;{\r\n		String&nbsp;hqlString&nbsp;=&nbsp;&quot;FROM&nbsp;User&nbsp;u&nbsp;where&nbsp;u.username=?&nbsp;and&nbsp;u.password=?&quot;;\r\n		List&lt;User&gt;&nbsp;find&nbsp;=&nbsp;(List&lt;User&gt;)&nbsp;hibernateTemplate.find(hqlString,&nbsp;user.getUsername(),user.getPassword());\r\n		return&nbsp;find;\r\n	}\r\n\r\n}</pre><p>因为只是测试所以就不新建service类 但是实际项目中需要注意 通常事务管理都是配在service层的 如果不新建service会导致事务管理不起作用</p><p>然后新建action 和对应的xml文件<br/></p><p><span style=\"color: rgb(255, 0, 0);\">*这里要注意和springmvc的区别 springmvc中action是可以不用继承其他类的,但是struts中action必须要继承一个ActionSupport的类</span></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.test.action;\r\n\r\nimport&nbsp;java.util.List;\r\n\r\nimport&nbsp;javax.annotation.Resource;\r\n\r\nimport&nbsp;org.springframework.stereotype.Controller;\r\n\r\nimport&nbsp;com.opensymphony.xwork2.ActionSupport;\r\nimport&nbsp;com.test.dao.UserDAO;\r\nimport&nbsp;com.test.entity.User;\r\n\r\n@Controller\r\npublic&nbsp;class&nbsp;UserAction&nbsp;extends&nbsp;ActionSupport{\r\n	@Resource\r\n	private&nbsp;UserDAO&nbsp;userDAO;\r\n	\r\n	private&nbsp;User&nbsp;user;\r\n	\r\n	public&nbsp;User&nbsp;getUser()&nbsp;{\r\n		return&nbsp;user;\r\n	}\r\n\r\n	public&nbsp;void&nbsp;setUser(User&nbsp;user)&nbsp;{\r\n		this.user&nbsp;=&nbsp;user;\r\n	}\r\n\r\n	public&nbsp;String&nbsp;login()&nbsp;{\r\n		List&lt;User&gt;&nbsp;user2&nbsp;=&nbsp;userDAO.getUser(user);\r\n		if&nbsp;(user2!=null&amp;&amp;user2.size()&gt;0)&nbsp;{\r\n			return&nbsp;SUCCESS;\r\n		}\r\n		return&nbsp;this.ERROR;\r\n	}\r\n	\r\n}</pre><p><span style=\"color: rgb(0, 0, 0);\">user-struts.xml的内容</span></p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;struts&nbsp;PUBLIC\r\n	&quot;-//Apache&nbsp;Software&nbsp;Foundation//DTD&nbsp;Struts&nbsp;Configuration&nbsp;2.3//EN&quot;\r\n	&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;\r\n\r\n&lt;struts&gt;\r\n	&lt;package&nbsp;name=&quot;user-action&quot;&nbsp;namespace=&quot;/&quot;&nbsp;extends=&quot;struts-default&quot;&gt;\r\n		&lt;action&nbsp;name=&quot;user_*&quot;&nbsp;class=&quot;userAction&quot;&nbsp;method=&quot;{1}&quot;&gt;\r\n			&lt;result&nbsp;name=&quot;success&quot;&gt;\r\n				/WEB-INF/jsp/success.jsp\r\n			&lt;/result&gt;\r\n			&lt;result&nbsp;name=&quot;error&quot;&gt;\r\n				/WEB-INF/jsp/failed.jsp\r\n			&lt;/result&gt;\r\n		&lt;/action&gt;\r\n	&lt;/package&gt;\r\n\r\n&lt;/struts&gt;</pre><p>在WEB-INF/jsp下新建success.jsp 和 failed.jsp</p><p>为index.jsp加入一个form表单</p><pre class=\"brush:html;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action=&quot;user_login.action&quot;&nbsp;method=&quot;post&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;user.username&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;user.password&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;submit&quot;&nbsp;value=&quot;登录&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&lt;/form&gt;</pre><p>然后启动项目 进入index.jsp执行登录就能看到效果啦<br/></p><p>完结 撒花~~</p><p><img src=\"http://img.baidu.com/hi/jx2/j_0011.gif\"/><img src=\"http://img.baidu.com/hi/jx2/j_0011.gif\"/><img src=\"http://img.baidu.com/hi/jx2/j_0011.gif\"/></p>',9,'\0'),('一遍记住 Java 常用的八种排序算法与代码实现','1dd58f61a7ef405b8018738f375888a5','2017-05-25 11:16:39','#排序算法#java#面试',0,0,'<p><br/></p><h1>1.直接插入排序</h1><blockquote><p>经常碰到这样一类排序问题：把新的数据插入到已经排好的数据列中。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>将第一个数和第二个数排序，然后构成一个有序序列</p></li><li><p>将第三个数插入进去，构成一个新的有序序列。</p></li><li><p>对第四个数、第五个数……直到最后一个数，重复第二步。</p></li></ol><p><br/></p><p>如何写写成代码：</p><ol class=\" list-paddingleft-2\"><li><p>首先设定插入次数，即循环次数，for(int i=1;i&lt;length;i++)，1个数的那次不用插入。</p></li><li><p>设定插入数和得到已经排好序列的最后一个数的位数。insertNum和j=i-1。</p></li><li><p>从最后一个数开始向前循环，如果插入数小于当前数，就将当前数向后移动一位。</p></li><li><p>将当前数放置到空着的位置，即j+1。</p></li></ol><p>代码实现如下：</p><pre>public&nbsp;void&nbsp;insertSort(int[]&nbsp;a){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;length=a.length;//数组长度，将这个提取出来是为了提高速度。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;insertNum;//要插入的数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i=1;i&lt;length;i++){//插入的次数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insertNum=a[i];//要插入的数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j=i-1;//已经排序好的序列元素个数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(j&gt;=0&amp;&amp;a[j]&gt;insertNum){//序列从后到前循环，将大于insertNum的数向后移动一格\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j+1]=a[j];//元素移动一格\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j+1]=insertNum;//将需要插入的数放在要插入的位置。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h1>2.希尔排序</h1><blockquote><p>对于直接插入排序问题，数据量巨大时。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>将数的个数设为n，取奇数k=n/2，将下标差值为k的书分为一组，构成有序序列。</p></li><li><p>再取k=k/2 ，将下标差值为k的书分为一组，构成有序序列。</p></li><li><p>重复第二步，直到k=1执行简单插入排序。</p></li></ol><p><br/></p><p>如何写成代码：</p><ol class=\" list-paddingleft-2\"><li><p>首先确定分的组数。</p></li><li><p>然后对组中元素进行插入排序。</p></li><li><p>然后将length/2，重复1,2步，直到length=0为止。</p></li></ol><p>代码实现如下：</p><pre>public&nbsp;&nbsp;void&nbsp;sheelSort(int[]&nbsp;a){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;d&nbsp;&nbsp;=&nbsp;a.length;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(d!=0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d=d/2;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;x&nbsp;=&nbsp;0;&nbsp;x&nbsp;&lt;&nbsp;d;&nbsp;x++)&nbsp;{//分的组数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;x&nbsp;+&nbsp;d;&nbsp;i&nbsp;&lt;&nbsp;a.length;&nbsp;i&nbsp;+=&nbsp;d)&nbsp;{//组中的元素，从第二个数开始\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;j&nbsp;=&nbsp;i&nbsp;-&nbsp;d;//j为有序序列最后一位的位数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;temp&nbsp;=&nbsp;a[i];//要插入的元素\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(;&nbsp;j&nbsp;&gt;=&nbsp;0&nbsp;&amp;&amp;&nbsp;temp&nbsp;&lt;&nbsp;a[j];&nbsp;j&nbsp;-=&nbsp;d)&nbsp;{//从后往前遍历。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j&nbsp;+&nbsp;d]&nbsp;=&nbsp;a[j];//向后移动d位\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j&nbsp;+&nbsp;d]&nbsp;=&nbsp;temp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h1>3.简单选择排序</h1><blockquote><p>常用于取序列中最大最小的几个数时。</p></blockquote><p>(如果每次比较都交换，那么就是交换排序；如果每次比较完一个循环再交换，就是简单选择排序。)</p><ol class=\" list-paddingleft-2\"><li><p>遍历整个序列，将最小的数放在最前面。</p></li><li><p>遍历剩下的序列，将最小的数放在最前面。</p></li><li><p>重复第二步，直到只剩下一个数。</p></li></ol><p><br/></p><p>如何写成代码：</p><ol class=\" list-paddingleft-2\"><li><p>首先确定循环次数，并且记住当前数字和当前位置。</p></li><li><p>将当前位置后面所有的数与当前数字进行对比，小数赋值给key，并记住小数的位置。</p></li><li><p>比对完成后，将最小的值与第一个数的值交换。</p></li><li><p>重复2、3步。</p></li></ol><p>代码实现如下：</p><pre>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;selectSort(int[]&nbsp;a)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;length&nbsp;=&nbsp;a.length;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;length;&nbsp;i++)&nbsp;{//循环次数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;key&nbsp;=&nbsp;a[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;position=i;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;i&nbsp;+&nbsp;1;&nbsp;j&nbsp;&lt;&nbsp;length;&nbsp;j++)&nbsp;{//选出最小的值和位置\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a[j]&nbsp;&lt;&nbsp;key)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key&nbsp;=&nbsp;a[j];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position&nbsp;=&nbsp;j;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[position]=a[i];//交换位置\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i]=key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h1>4.堆排序</h1><blockquote><p>对简单选择排序的优化。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>将序列构建成大顶堆。</p></li><li><p>将根节点与最后一个节点交换，然后断开最后一个节点。</p></li><li><p>重复第一、二步，直到所有节点断开。</p></li></ol><p><br/></p><p>代码实现如下：</p><pre>public&nbsp;&nbsp;void&nbsp;heapSort(int[]&nbsp;a){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;开始排序&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;arrayLength=a.length;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//循环建堆&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i=0;i&lt;arrayLength-1;i++){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//建堆&nbsp;&nbsp;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buildMaxHeap(a,arrayLength-1-i);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//交换堆顶和最后一个元素&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(a,0,arrayLength-1-i);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Arrays.toString(a));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;&nbsp;void&nbsp;swap(int[]&nbsp;data,&nbsp;int&nbsp;i,&nbsp;int&nbsp;j)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;tmp=data[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[i]=data[j];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[j]=tmp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;//对data数组从0到lastIndex建大顶堆&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;void&nbsp;buildMaxHeap(int[]&nbsp;data,&nbsp;int&nbsp;lastIndex)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//从lastIndex处节点（最后一个节点）的父节点开始&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i=(lastIndex-1)/2;i&gt;=0;i--){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//k保存正在判断的节点&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;k=i;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果当前k节点的子节点存在&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(k*2+1&lt;=lastIndex){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//k节点的左子节点的索引&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;biggerIndex=2*k+1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(biggerIndex&lt;lastIndex){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//若果右子节点的值较大&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(data[biggerIndex]&lt;data[biggerIndex+1]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//biggerIndex总是记录较大子节点的索引&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;biggerIndex++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//如果k节点的值小于其较大的子节点的值&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(data[k]&lt;data[biggerIndex]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//交换他们&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap(data,k,biggerIndex);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k=biggerIndex;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h1>5.冒泡排序</h1><blockquote><p>一般不用。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>将序列中所有元素两两比较，将最大的放在最后面。</p></li><li><p>将剩余序列中所有元素两两比较，将最大的放在最后面。</p></li><li><p>重复第二步，直到只剩下一个数。</p></li></ol><p><br/></p><p>如何写成代码：</p><ol class=\" list-paddingleft-2\"><li><p>设置循环次数。</p></li><li><p>设置开始比较的位数，和结束的位数。</p></li><li><p>两两比较，将最小的放到前面去。</p></li><li><p>重复2、3步，直到循环次数完毕。</p></li></ol><p>代码实现如下：</p><pre>public&nbsp;void&nbsp;bubbleSort(int[]&nbsp;a){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;length=a.length;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;temp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i=0;i&lt;a.length;i++){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;j=0;j&lt;a.length-i-1;j++){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(a[j]&gt;a[j+1]){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp=a[j];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j]=a[j+1];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[j+1]=temp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h1>6.快速排序</h1><blockquote><p>要求时间最快时。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>选择第一个数为p，小于p的数放在左边，大于p的数放在右边。</p></li><li><p>递归的将p左边和右边的数都按照第一步进行，直到不能递归。</p></li></ol><p><br/></p><p>代码实现如下：</p><pre>public&nbsp;static&nbsp;void&nbsp;quickSort(int[]&nbsp;numbers,&nbsp;int&nbsp;start,&nbsp;int&nbsp;end)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(start&nbsp;&lt;&nbsp;end)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;base&nbsp;=&nbsp;numbers[start];&nbsp;//&nbsp;选定的基准值（第一个数值作为基准值）&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;temp;&nbsp;//&nbsp;记录临时中间值&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;start,&nbsp;j&nbsp;=&nbsp;end;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((numbers[i]&nbsp;&lt;&nbsp;base)&nbsp;&amp;&amp;&nbsp;(i&nbsp;&lt;&nbsp;end))&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((numbers[j]&nbsp;&gt;&nbsp;base)&nbsp;&amp;&amp;&nbsp;(j&nbsp;&gt;&nbsp;start))&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;&lt;=&nbsp;j)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp&nbsp;=&nbsp;numbers[i];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers[i]&nbsp;=&nbsp;numbers[j];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers[j]&nbsp;=&nbsp;temp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;while&nbsp;(i&nbsp;&lt;=&nbsp;j);&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(start&nbsp;&lt;&nbsp;j)&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quickSort(numbers,&nbsp;start,&nbsp;j);&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(end&nbsp;&gt;&nbsp;i)&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quickSort(numbers,&nbsp;i,&nbsp;end);&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n}</pre><h1>7.归并排序</h1><blockquote><p>速度仅次于快排，内存少的时候使用，可以进行并行计算的时候使用。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>选择相邻两个数组成一个有序序列。</p></li><li><p>选择相邻的两个有序序列组成一个有序序列。</p></li><li><p>重复第二步，直到全部组成一个有序序列。</p></li></ol><p><br/></p><p>代码实现如下：</p><pre>public&nbsp;static&nbsp;void&nbsp;mergeSort(int[]&nbsp;numbers,&nbsp;int&nbsp;left,&nbsp;int&nbsp;right)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;t&nbsp;=&nbsp;1;//&nbsp;每组元素个数&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;size&nbsp;=&nbsp;right&nbsp;-&nbsp;left&nbsp;+&nbsp;1;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(t&nbsp;&lt;&nbsp;size)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;s&nbsp;=&nbsp;t;//&nbsp;本次循环每组元素个数&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;2&nbsp;*&nbsp;s;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;i&nbsp;=&nbsp;left;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(i&nbsp;+&nbsp;(t&nbsp;-&nbsp;1)&nbsp;&lt;&nbsp;size)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(numbers,&nbsp;i,&nbsp;i&nbsp;+&nbsp;(s&nbsp;-&nbsp;1),&nbsp;i&nbsp;+&nbsp;(t&nbsp;-&nbsp;1));&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i&nbsp;+=&nbsp;t;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(i&nbsp;+&nbsp;(s&nbsp;-&nbsp;1)&nbsp;&lt;&nbsp;right)&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(numbers,&nbsp;i,&nbsp;i&nbsp;+&nbsp;(s&nbsp;-&nbsp;1),&nbsp;right);&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n}&nbsp;&nbsp;&nbsp;\r\nprivate&nbsp;static&nbsp;void&nbsp;merge(int[]&nbsp;data,&nbsp;int&nbsp;p,&nbsp;int&nbsp;q,&nbsp;int&nbsp;r)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int[]&nbsp;B&nbsp;=&nbsp;new&nbsp;int[data.length];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;s&nbsp;=&nbsp;p;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;t&nbsp;=&nbsp;q&nbsp;+&nbsp;1;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;k&nbsp;=&nbsp;p;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(s&nbsp;&lt;=&nbsp;q&nbsp;&amp;&amp;&nbsp;t&nbsp;&lt;=&nbsp;r)&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(data[s]&nbsp;&lt;=&nbsp;data[t])&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k]&nbsp;=&nbsp;data[s];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s++;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k]&nbsp;=&nbsp;data[t];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t++;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s&nbsp;==&nbsp;q&nbsp;+&nbsp;1)&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k++]&nbsp;=&nbsp;data[t++];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k++]&nbsp;=&nbsp;data[s++];&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;p;&nbsp;i&nbsp;&lt;=&nbsp;r;&nbsp;i++)&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data[i]&nbsp;=&nbsp;B[i];&nbsp;&nbsp;&nbsp;\r\n}</pre><h1>8.基数排序</h1><blockquote><p>用于大量数，很长的数进行排序时。</p></blockquote><ol class=\" list-paddingleft-2\"><li><p>将所有的数的个位数取出，按照个位数进行排序，构成一个序列。</p></li><li><p>将新构成的所有的数的十位数取出，按照十位数进行排序，构成一个序列。</p></li></ol><p><br/></p><p>代码实现如下：</p><pre>public&nbsp;void&nbsp;sort(int[]&nbsp;array)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//首先确定排序的趟数;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;max&nbsp;=&nbsp;array[0];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;array.length;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(array[i]&nbsp;&gt;&nbsp;max)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max&nbsp;=&nbsp;array[i];\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;time&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//判断位数;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(max&nbsp;&gt;&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max&nbsp;/=&nbsp;10;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//建立10个队列;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;ArrayList&gt;&nbsp;queue&nbsp;=&nbsp;new&nbsp;ArrayList&lt;ArrayList&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Integer&gt;&nbsp;queue1&nbsp;=&nbsp;new&nbsp;ArrayList&lt;Integer&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.add(queue1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//进行time次分配和收集;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;time;&nbsp;i++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//分配数组元素;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;array.length;&nbsp;j++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//得到数字的第time+1位数;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;x&nbsp;=&nbsp;array[j]&nbsp;%&nbsp;(int)&nbsp;Math.pow(10,&nbsp;i&nbsp;+&nbsp;1)&nbsp;/&nbsp;(int)&nbsp;Math.pow(10,&nbsp;i);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Integer&gt;&nbsp;queue2&nbsp;=&nbsp;queue.get(x);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue2.add(array[j]);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.set(x,&nbsp;queue2);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;count&nbsp;=&nbsp;0;//元素计数器;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//收集队列元素;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;k&nbsp;=&nbsp;0;&nbsp;k&nbsp;&lt;&nbsp;10;&nbsp;k++)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(queue.get(k).size()&nbsp;&gt;&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Integer&gt;&nbsp;queue3&nbsp;=&nbsp;queue.get(k);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array[count]&nbsp;=&nbsp;queue3.get(0);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue3.remove(0);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p>',2,'\0'),('转载:java到底是值传递还是引用传递？','2d57b25eaa86443ba644ed6ed768ec9e','2017-05-25 11:14:29','#转载#java',1,0,'<p><span style=\"color: rgb(255, 0, 0);\">本文转载自知乎</span><span style=\"-webkit-tap-highlight-color: rgba(225, 225, 225, 0.5); font-weight: 700; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(255, 0, 0); text-decoration: underline;\"><a class=\"author-link\" target=\"_blank\" href=\"https://www.zhihu.com/people/intopass\" style=\"-webkit-tap-highlight-color: rgba(225, 225, 225, 0.5); font-weight: 700; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(255, 0, 0); text-decoration: underline;\">Intopass</a></span></p><p><br/></p><p>作者：Intopass<br/>链接：https://www.zhihu.com/question/31203609/answer/50992895<br/>来源：知乎<br/>著作权归作者所有，转载请联系作者获得授权。<br/><br/></p><p>首先，不要纠结于 Pass By Value 和 Pass By Reference 的字面上的意义，否则很容易陷入所谓的“一切传引用其实本质上是传值”这种并不能解决问题无意义论战中。<br/>更何况，要想知道Java到底是传值还是传引用，起码你要先知道传值和传引用的准确含义吧？可是如果你已经知道了这两个名字的准确含义，那么你自己就能判断Java到底是传值还是传引用。<br/>这就好像用大学的名词来解释高中的题目，对于初学者根本没有任何意义。<br/><br/>一：搞清楚 基本类型 和 引用类型的不同之处<br/></p><pre>int&nbsp;num&nbsp;=&nbsp;10;\r\nString&nbsp;str&nbsp;=&nbsp;&quot;hello&quot;;</pre><p><br/><img src=\"https://pic2.zhimg.com/166032bc90958c21604110441ad03f45_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"728\"/>如图所示，num是基本类型，值就直接保存在变量中。而str是引用类型，变量中保存的只是实际对象的地址。一般称这种变量为&quot;引用&quot;，引用指向实际对象，实际对象中保存着内容。<br/><br/>二：搞清楚赋值运算符（=）的作用<br/></p><pre>num&nbsp;=&nbsp;20;\r\nstr&nbsp;=&nbsp;&quot;java&quot;;</pre><p><img src=\"https://pic3.zhimg.com/287c0efbb179638cf4cf27cbfdf3e746_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"714\"/>对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。<br/>对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。<strong>但是原来的对象不会被改变（重要）。</strong><br/>如上图所示，&quot;hello&quot; 字符串对象没有被改变。（没有被任何引用所指向的对象是垃圾，会被垃圾回收器回收）<br/><br/>三：调用方法时发生了什么？<strong>参数传递基本上就是赋值操作</strong>。<br/></p><pre>第一个例子：基本类型\r\nvoid&nbsp;foo(int&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;100;\r\n}\r\nfoo(num);&nbsp;//&nbsp;num&nbsp;没有被改变\r\n\r\n第二个例子：没有提供改变自身方法的引用类型\r\nvoid&nbsp;foo(String&nbsp;text)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;&quot;windows&quot;;\r\n}\r\nfoo(str);&nbsp;//&nbsp;str&nbsp;也没有被改变\r\n\r\n第三个例子：提供了改变自身方法的引用类型\r\nStringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder(&quot;iphone&quot;);\r\nvoid&nbsp;foo(StringBuilder&nbsp;builder)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;builder.append(&quot;4&quot;);\r\n}\r\nfoo(sb);&nbsp;//&nbsp;sb&nbsp;被改变了，变成了&quot;iphone4&quot;。\r\n\r\n第四个例子：提供了改变自身方法的引用类型，但是不使用，而是使用赋值运算符。\r\nStringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder(&quot;iphone&quot;);\r\nvoid&nbsp;foo(StringBuilder&nbsp;builder)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;builder&nbsp;=&nbsp;new&nbsp;StringBuilder(&quot;ipad&quot;);\r\n}\r\nfoo(sb);&nbsp;//&nbsp;sb&nbsp;没有被改变，还是&nbsp;&quot;iphone&quot;。</pre><p><br/>重点理解为什么，第三个例子和第四个例子结果不同？<br/><br/>下面是第三个例子的图解：<br/><img src=\"https://pic4.zhimg.com/d8b82e07ea21375ca6b300f9162aa95f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"772\"/>builder.append(&quot;4&quot;)之后<br/><img src=\"https://pic4.zhimg.com/ff2ede9c6c55568d42425561f25a0fd7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"696\"/>下面是第四个例子的图解：<br/><img src=\"https://pic4.zhimg.com/d8b82e07ea21375ca6b300f9162aa95f_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"772\"/><br/>builder = new StringBuilder(&quot;ipad&quot;); 之后<br/><img src=\"https://pic2.zhimg.com/46fa5f10cc135a3ca087dae35a5211bd_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"710\"/></p><p><br/></p>',2,'\0'),('jsp:forward和response.sendRedirect的区别','4813c4faceba4ff0b3becfb21eb265bb','2017-05-25 11:12:06','#jsp#javaweb',0,0,'<p style=\"text-align: left;\">说理论知识的话 大家记起来并不方便直接说我的理解吧！</p><p style=\"text-align: left;\">现在请想象一下 你开车出门然后被别人刮蹭了 别人跑了 你没办法决定去派出所</p><p style=\"text-align: left;\">到了派出所警察和你说&quot;不好意思 这个不归我们管 这个归交警管&quot; 你只好自己去找交警</p><p style=\"text-align: left;\">这是sendRedirect 你做了两次请求1,先到派出所 2,然后到交警大队</p><p style=\"text-align: left;\"><span style=\"color: rgb(255, 0, 0);\">sendRedirect浏览器的url是会变的</span></p><p style=\"text-align: left;\">如果说是这样:</p><p style=\"text-align: left;\">你到了派出所 警察和你说&quot;这个不归我们管 但是交警大队就在我们后面 你把资料给我 我帮你办&quot; 你很开心</p><p style=\"text-align: left;\"><span style=\"color: rgb(255, 0, 0);\">这是jspforward 你只做了一次请求 这个时候浏览器的url是不会变的</span></p>',2,'\0'),('@Resource和@Autowired注解的区别','6403ba352cd94e078fa8b800a5a73873','2017-05-25 10:54:17','#注解#@Resource#@Autowired',2,0,'<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 25px;\">1、@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。&nbsp;</span><br/><span style=\"line-height: 25px;\">2、@Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，如果要允许null&nbsp;</span><span style=\"line-height: 25px;\">值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合</span><span style=\"line-height: 25px;\">@Qualifier注解进行使用，如下：&nbsp;</span></p><p>Java代码&nbsp;&nbsp;</p><ol class=\"dp-j list-paddingleft-2\" style=\"font-size: 1em; line-height: 1.4em; margin-bottom: 1px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); list-style-position: initial; list-style-image: initial; color: rgb(43, 145, 175);\"><li><p><span style=\"color: black;\"><span class=\"annotation\" style=\"color: rgb(100, 100, 100);\">@Autowired</span>()&nbsp;<span class=\"annotation\" style=\"color: rgb(100, 100, 100);\">@Qualifier</span>(<span class=\"string\" style=\"color: blue;\">&quot;baseDao&quot;</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></li><li><p><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">private</span>&nbsp;BaseDao&nbsp;baseDao;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></li></ol><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"line-height: 25px;\">3、@Resource（这个注解属于J2EE的），默认安照名称进行装配，名称可以通过name属性进行指定，&nbsp;</span><br/><span style=\"line-height: 25px;\">如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，</span><span style=\"line-height: 25px;\">如果注解写在setter方法上默认取属性名进行装配。&nbsp;</span><span style=\"line-height: 25px;\">当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名</span><span style=\"line-height: 25px;\">称进行装配。</span></p><p>Java代码&nbsp;&nbsp;</p><ol class=\"dp-j list-paddingleft-2\" style=\"font-size: 1em; line-height: 1.4em; margin-bottom: 1px; padding: 2px 0px; border: 1px solid rgb(209, 215, 220); list-style-position: initial; list-style-image: initial; color: rgb(43, 145, 175);\"><li><p><span style=\"color: black;\"><span class=\"annotation\" style=\"color: rgb(100, 100, 100);\">@Resource</span>(name=<span class=\"string\" style=\"color: blue;\">&quot;baseDao&quot;</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p></li><li><p><span style=\"color: black;\"><span class=\"keyword\" style=\"color: rgb(127, 0, 85); font-weight: bold;\">private</span>&nbsp;BaseDao&nbsp;baseDao; &nbsp; &nbsp;</span></p></li></ol><p>所以我更喜欢用@Resource注解</p>',11,'\0'),('ssm框架整合','7669eee222e4422f93cf3c9653c07174','2017-05-25 04:50:57','#ssm#框架整合',5,0,'<p>作为第一篇技术博客我就选择ssm框架整合了 正好也复习一下<br/></p><p>使用的开发工具:myeclipse</p><p>首先打开myeclipse</p><p>依次点击file-&gt;new-&gt;web project新建web项目</p><p>为了方便jar包管理 要勾上Add Maven support</p><p><img src=\"upload/image/20170525/1495694976232077212.png\" title=\"1495694976232077212.png\" alt=\"1.png\"/></p><p>选好javaversion 然后点击next</p><p>到这一步时别忘了勾上 Generate web.xml deployment descriptor<br/></p><p><img src=\"upload/image/20170525/1495687824682029587.png\" title=\"1495687824682029587.png\" alt=\"捕获.png\"/></p><p><br/></p><p>接着按下一步</p><p><img src=\"upload/image/20170525/1495695110035096804.png\" title=\"1495695110035096804.png\" alt=\"2.png\"/></p><p>填好Group id 和 artifact id</p><p>点击finish 完成webproject创建</p><p>然后点击项目里的pom.xml文件 会看到很多的dependency 这是myeclipse自动添加的依赖 我们这里将所有的dependency都删除 自己添加<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;dependency&gt;\r\n			&lt;groupId&gt;junit&lt;/groupId&gt;\r\n			&lt;artifactId&gt;junit&lt;/artifactId&gt;\r\n			&lt;version&gt;4.11&lt;/version&gt;\r\n			&lt;!--&nbsp;表示开发的时候引入，发布的时候不会加载此包&nbsp;--&gt;\r\n			&lt;scope&gt;test&lt;/scope&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;spring核心包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.springframework&lt;/groupId&gt;\r\n			&lt;artifactId&gt;spring-test&lt;/artifactId&gt;\r\n			&lt;version&gt;${spring.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;ueditor&nbsp;上传用&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.baidu&lt;/groupId&gt;\r\n			&lt;artifactId&gt;ueditor&lt;/artifactId&gt;\r\n			&lt;version&gt;1.1.2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.json&lt;/groupId&gt;\r\n			&lt;artifactId&gt;json&lt;/artifactId&gt;\r\n			&lt;version&gt;20160212&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;mybatis核心包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;\r\n			&lt;artifactId&gt;mybatis&lt;/artifactId&gt;\r\n			&lt;version&gt;${mybatis.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;mybatis/spring包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.mybatis&lt;/groupId&gt;\r\n			&lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;\r\n			&lt;version&gt;1.2.2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;导入java&nbsp;ee&nbsp;jar&nbsp;包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;javax&lt;/groupId&gt;\r\n			&lt;artifactId&gt;javaee-api&lt;/artifactId&gt;\r\n			&lt;version&gt;7.0&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;导入Mysql数据库链接jar包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;mysql&lt;/groupId&gt;\r\n			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\r\n			&lt;version&gt;5.1.30&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;导入dbcp的jar包，用来在applicationContext.xml中配置数据库&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;commons-dbcp&lt;/groupId&gt;\r\n			&lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;\r\n			&lt;version&gt;1.2.2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;JSTL标签类&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;jstl&lt;/groupId&gt;\r\n			&lt;artifactId&gt;jstl&lt;/artifactId&gt;\r\n			&lt;version&gt;1.2&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;日志文件管理包&nbsp;--&gt;\r\n		&lt;!--&nbsp;log&nbsp;start&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;log4j&lt;/groupId&gt;\r\n			&lt;artifactId&gt;log4j&lt;/artifactId&gt;\r\n			&lt;version&gt;${log4j.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;格式化对象，方便输出日志&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;\r\n			&lt;artifactId&gt;fastjson&lt;/artifactId&gt;\r\n			&lt;version&gt;1.1.41&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\r\n			&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\r\n			&lt;version&gt;${slf4j.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\r\n			&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\r\n			&lt;version&gt;${slf4j.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;log&nbsp;end&nbsp;--&gt;\r\n		&lt;!--&nbsp;映入JSON&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;\r\n			&lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;\r\n			&lt;version&gt;1.9.13&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n			&lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\r\n			&lt;version&gt;${jackson.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\r\n			&lt;version&gt;${jackson.version}&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\r\n			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\r\n			&lt;version&gt;2.5.0&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;!--&nbsp;上传组件包&nbsp;--&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;commons-fileupload&lt;/groupId&gt;\r\n			&lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;\r\n			&lt;version&gt;1.3.1&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;commons-io&lt;/groupId&gt;\r\n			&lt;artifactId&gt;commons-io&lt;/artifactId&gt;\r\n			&lt;version&gt;2.4&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;commons-codec&lt;/groupId&gt;\r\n			&lt;artifactId&gt;commons-codec&lt;/artifactId&gt;\r\n			&lt;version&gt;1.9&lt;/version&gt;\r\n		&lt;/dependency&gt;\r\n		&lt;dependency&gt;\r\n			&lt;groupId&gt;aspectj&lt;/groupId&gt;\r\n			&lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\r\n			&lt;version&gt;1.5.4&lt;/version&gt;\r\n		&lt;/dependency&gt;</pre><p>如果项目有红叉的话 试试alt+f5刷新项目</p><p><br/></p><p>添加完jar包依赖后 我们再来改web.xml里面的东西</p><p>删除不需要的 添加需要的listener和servlet最后就是这样啦</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;Spring和mybatis的配置文件&nbsp;--&gt;\r\n	&lt;context-param&gt;\r\n		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n		&lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;\r\n	&lt;/context-param&gt;\r\n\r\n	&lt;!--&nbsp;编码过滤器&nbsp;--&gt;\r\n	&lt;filter&gt;\r\n		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\r\n		&lt;async-supported&gt;true&lt;/async-supported&gt;\r\n		&lt;init-param&gt;\r\n			&lt;param-name&gt;encoding&lt;/param-name&gt;\r\n			&lt;param-value&gt;UTF-8&lt;/param-value&gt;\r\n		&lt;/init-param&gt;\r\n	&lt;/filter&gt;\r\n	&lt;filter-mapping&gt;\r\n		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;\r\n		&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\r\n	&lt;/filter-mapping&gt;\r\n\r\n	&lt;!--&nbsp;Spring监听器&nbsp;--&gt;\r\n	&lt;listener&gt;\r\n		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\r\n	&lt;/listener&gt;\r\n\r\n	&lt;!--&nbsp;防止Spring内存溢出监听器&nbsp;--&gt;\r\n	&lt;listener&gt;\r\n		&lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;\r\n	&lt;/listener&gt;\r\n\r\n	&lt;!--&nbsp;Spring&nbsp;MVC&nbsp;servlet&nbsp;--&gt;\r\n	&lt;servlet&gt;\r\n		&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;\r\n		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\r\n		&lt;init-param&gt;\r\n			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n			&lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;\r\n		&lt;/init-param&gt;\r\n		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\r\n		&lt;async-supported&gt;true&lt;/async-supported&gt;\r\n	&lt;/servlet&gt;\r\n	&lt;servlet-mapping&gt;\r\n		&lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;\r\n		&lt;!--&nbsp;此处可以可以配置成*.do，对应struts的后缀习惯&nbsp;--&gt;\r\n		&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;\r\n	&lt;/servlet-mapping&gt;</pre><p>这样web.xml 就算配置完成了<br/></p><p>接着我们在src/main/resources 下新建3个xml文件 spring.xml spring-mvc.xml myBtis-config.xml</p><p>首先是spring.xml里的内容</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;\r\n	xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\r\n	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;\r\n	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;\r\n	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\r\n	http://www.springframework.org/schema/context&nbsp;\r\n	http://www.springframework.org/schema/context/spring-context-3.2.xsd\r\n	http://www.springframework.org/schema/tx&nbsp;\r\n	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\r\n	http://www.springframework.org/schema/aop&nbsp;http://www.springframework.org/schema/aop/spring-aop-3.2.xsd&quot;&gt;\r\n	&lt;!--&nbsp;自动扫描&nbsp;--&gt;\r\n	&lt;context:component-scan&nbsp;base-package=&quot;com.mb&quot;&nbsp;/&gt;\r\n\r\n	&lt;!--&nbsp;引入配置文件&nbsp;--&gt;\r\n	&lt;context:property-placeholder&nbsp;location=&quot;classpath:*.properties&quot;&nbsp;/&gt;&nbsp;\r\n\r\n	&lt;bean&nbsp;id=&quot;dataSource&quot;&nbsp;class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;\r\n		destroy-method=&quot;close&quot;&gt;\r\n		&lt;property&nbsp;name=&quot;driverClassName&quot;&nbsp;value=&quot;${driver}&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;url&quot;&nbsp;value=&quot;${url}&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;username&quot;&nbsp;value=&quot;root&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;password&quot;&nbsp;value=&quot;${password}&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;初始化连接大小&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;initialSize&quot;&nbsp;value=&quot;${initialSize}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;连接池最大数量&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxActive&quot;&nbsp;value=&quot;${maxActive}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;连接池最大空闲&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxIdle&quot;&nbsp;value=&quot;${maxIdle}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;连接池最小空闲&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;minIdle&quot;&nbsp;value=&quot;${minIdle}&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;获取连接最大等待时间&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxWait&quot;&nbsp;value=&quot;${maxWait}&quot;&gt;&lt;/property&gt;\r\n	&lt;/bean&gt;\r\n	&lt;bean&nbsp;id=&quot;sqlSessionFactory&quot;&nbsp;class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\r\n		&lt;property&nbsp;name=&quot;dataSource&quot;&nbsp;ref=&quot;dataSource&quot;&nbsp;/&gt;\r\n		&lt;property&nbsp;name=&quot;configLocation&quot;&nbsp;value=&quot;classpath:myBatis-config.xml&quot;&nbsp;/&gt;\r\n		&lt;!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置--&gt;\r\n		&lt;property&nbsp;name=&quot;mapperLocations&quot;&nbsp;value=&quot;classpath:com/test/dao/*.xml&quot;/&gt;\r\n		\r\n	&lt;/bean&gt;\r\n\r\n	&lt;bean&nbsp;id=&quot;transactionManager&quot;\r\n		class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;\r\n		&lt;property&nbsp;name=&quot;dataSource&quot;&nbsp;ref=&quot;dataSource&quot;&nbsp;/&gt;\r\n	&lt;/bean&gt;\r\n	&lt;!--&nbsp;配置事务通知&nbsp;--&gt;\r\n	&lt;tx:advice&nbsp;id=&quot;advice&quot;&nbsp;transaction-manager=&quot;transactionManager&quot;&gt;\r\n		&lt;tx:attributes&gt;\r\n			&lt;!--&nbsp;默认只处理运行时异常，可加rollback-for=&quot;Exception/Throwable&quot;等处理所有异常或包括错误&nbsp;--&gt;\r\n			&lt;tx:method&nbsp;name=&quot;insert*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;add*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;update*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;edit*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;delete*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;add*&quot;&nbsp;propagation=&quot;REQUIRED&quot;\r\n				rollback-for=&quot;Exception&quot;&nbsp;/&gt;\r\n			&lt;tx:method&nbsp;name=&quot;*&quot;&nbsp;propagation=&quot;SUPPORTS&quot;&nbsp;/&gt;\r\n		&lt;/tx:attributes&gt;\r\n	&lt;/tx:advice&gt;\r\n	&lt;!--&nbsp;配置切面织入的范围,后边要把事务边界定在service层&nbsp;--&gt;\r\n	&lt;aop:config&gt;\r\n		&lt;aop:advisor&nbsp;advice-ref=&quot;advice&quot;\r\n			pointcut=&quot;execution(*&nbsp;com.test.service.impl.*.*(..))&quot;&nbsp;/&gt;\r\n	&lt;/aop:config&gt;\r\n	&lt;!--&nbsp;配置SessionTemplate，已封装了繁琐的数据操作&nbsp;--&gt;\r\n	&lt;bean&nbsp;id=&quot;sqlSessionTemplate&quot;&nbsp;class=&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;\r\n		&lt;constructor-arg&nbsp;name=&quot;sqlSessionFactory&quot;&nbsp;ref=&quot;sqlSessionFactory&quot;&nbsp;/&gt;\r\n	&lt;/bean&gt;\r\n\r\n	&lt;!--&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;*&quot;&nbsp;/&gt;&nbsp;--&gt;\r\n\r\n\r\n	&lt;!--&nbsp;自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。&nbsp;--&gt;\r\n	&lt;context:component-scan&nbsp;base-package=&quot;com.test&quot;&gt;\r\n		&lt;context:exclude-filter&nbsp;type=&quot;annotation&quot;\r\n			expression=&quot;org.springframework.stereotype.Controller&quot;&nbsp;/&gt;\r\n	&lt;/context:component-scan&gt;\r\n\r\n	&lt;!--&nbsp;配置&nbsp;转换器，对于在basePackage设置的包（包括子包）下的接口类，&nbsp;如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，&nbsp;\r\n		将被转换成spring的BEAN，在调用&nbsp;的地方通过@Autowired方式将可以注入接口实例&nbsp;--&gt;\r\n\r\n	&lt;!--&nbsp;DAO接口所在包名，Spring会自动查找其下的类&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;basePackage&quot;&nbsp;value=&quot;com.test.dao&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;sqlSessionFactoryBeanName&quot;&nbsp;value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&lt;/beans&gt;</pre><p>然后是spring-mvc.xml 里的内容</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;\r\n&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-4.0.xsd&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd&quot;&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--避免IE执行AJAX时，返回JSON出现下载文件&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;mappingJacksonHttpMessageConverter&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;supportedMediaTypes&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;	&lt;!--&nbsp;同时开启json格式的支持&nbsp;--&gt;\r\n	&lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt;\r\n	&lt;!--&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;*&quot;/&gt;&nbsp;--&gt;\r\n	\r\n	&lt;!--&nbsp;扫描所有的controller&nbsp;但是不扫描service&nbsp;--&gt;\r\n	&lt;context:component-scan&nbsp;base-package=&quot;com.test&quot;&gt;\r\n		&lt;context:include-filter&nbsp;type=&quot;annotation&quot;\r\n			expression=&quot;org.springframework.stereotype.Controller&quot;&nbsp;/&gt;\r\n		&lt;context:exclude-filter&nbsp;type=&quot;annotation&quot;\r\n			expression=&quot;org.springframework.stereotype.Service&quot;&nbsp;/&gt;\r\n	&lt;/context:component-scan&gt;\r\n	\r\n	\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义跳转的文件的前后缀&nbsp;，视图模式配置&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个&nbsp;可用的url地址&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;prefix&quot;&nbsp;value=&quot;/WEB-INF/jsp/&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;suffix&quot;&nbsp;value=&quot;.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;multipartResolver&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;默认编码&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;defaultEncoding&quot;&nbsp;value=&quot;UTF-8&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;文件大小最大值&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxUploadSize&quot;&nbsp;value=&quot;10485760000&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;内存中的最大值&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;maxInMemorySize&quot;&nbsp;value=&quot;40960&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&lt;/beans&gt;</pre><p>然后是myBatis-config.xml 里的内容</p><pre class=\"brush:xml;toolbar:false\">&nbsp;&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;&nbsp;\r\n&lt;!DOCTYPE&nbsp;configuration&nbsp;PUBLIC&nbsp;&quot;-//mybatis.org//DTD&nbsp;Config&nbsp;3.0//EN&quot;&nbsp;\r\n&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\r\n&lt;configuration&gt;\r\n	&lt;!--&nbsp;通过别名简化对类的使用&nbsp;--&gt;\r\n	&lt;typeAliases&gt;\r\n		&lt;!--&nbsp;通过package,&nbsp;可以直接指定package的名字，&nbsp;mybatis会自动扫描你指定包下面的javabean,&nbsp;并且默认设置一个别名，默认的名字为非限定类名来作为它的别名。&nbsp;--&gt;\r\n\r\n		&lt;package&nbsp;name=&quot;com.mb.entity&quot;&nbsp;/&gt;\r\n	&lt;/typeAliases&gt;\r\n&lt;/configuration&gt;</pre><p>为了修改方便我们将mysql配置文件放到一个单独的properties文件里</p><pre class=\"brush:xml;toolbar:false\">driver=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://127.0.0.1:3306/你的数据库?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true\r\nusername=root\r\npassword=这里填密码\r\n#定义初始连接数\r\ninitialSize=0\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000</pre><p>接着将日志properties添加进来 不然项目启动是看不到日志的<br/></p><pre class=\"brush:xml;toolbar:false\">#日志输出级别\r\nlog4j.rootLogger=debug,Console\r\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.Console.Target=System.out\r\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.Console.layout.ConversionPattern=[%p][%d{yyyy-MM-dd&nbsp;HH\\:mm\\:ss,SSS}][%c]%m%n</pre><p>进行到这一步ssm的整合就算完了 接下来我们测试一下</p><p>在mysql里新建一张user表 设置三个字段 id username password&nbsp;</p><p>然后在com.test.entity 新建一个User类</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.test.entity;\r\n\r\nimport&nbsp;java.io.Serializable;\r\n\r\npublic&nbsp;class&nbsp;User&nbsp;implements&nbsp;Serializable{\r\n	\r\n	private&nbsp;Integer&nbsp;id;\r\n	private&nbsp;String&nbsp;username;\r\n	private&nbsp;String&nbsp;password;\r\n	public&nbsp;User()&nbsp;{\r\n	}\r\n	public&nbsp;User(Integer&nbsp;id,&nbsp;String&nbsp;username,&nbsp;String&nbsp;password)&nbsp;{\r\n		this.id&nbsp;=&nbsp;id;\r\n		this.username&nbsp;=&nbsp;username;\r\n		this.password&nbsp;=&nbsp;password;\r\n	}\r\n	public&nbsp;Integer&nbsp;getId()&nbsp;{\r\n		return&nbsp;id;\r\n	}\r\n	public&nbsp;void&nbsp;setId(Integer&nbsp;id)&nbsp;{\r\n		this.id&nbsp;=&nbsp;id;\r\n	}\r\n	public&nbsp;String&nbsp;getUsername()&nbsp;{\r\n		return&nbsp;username;\r\n	}\r\n	public&nbsp;void&nbsp;setUsername(String&nbsp;username)&nbsp;{\r\n		this.username&nbsp;=&nbsp;username;\r\n	}\r\n	public&nbsp;String&nbsp;getPassword()&nbsp;{\r\n		return&nbsp;password;\r\n	}\r\n	public&nbsp;void&nbsp;setPassword(String&nbsp;password)&nbsp;{\r\n		this.password&nbsp;=&nbsp;password;\r\n	}\r\n	\r\n	\r\n}</pre><p>在com.test.dao 新建接口UserMapper和UserMapper.xml (mybatis 我习惯叫mapper hibernate我一般叫dao)</p><p>ps:mybatis 和spring结合是不需要接口实现类的&nbsp;</p><p>接口UserMapper里只有一个方法public User getUser(int id);</p><p>而UserMapper.xml就稍微有点麻烦了</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;mapper&nbsp;PUBLIC&nbsp;&quot;-//mybatis.org//DTD&nbsp;Mapper&nbsp;3.0//EN&quot;&nbsp;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&nbsp;&gt;\r\n&lt;mapper&nbsp;namespace=&quot;com.test.dao.UserMapper&quot;&nbsp;&gt;\r\n&nbsp;&nbsp;&lt;resultMap&nbsp;id=&quot;UserMap&quot;&nbsp;type=&quot;com.test.entity.User&quot;&nbsp;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;id&nbsp;column=&quot;id&quot;&nbsp;property=&quot;id&quot;&nbsp;jdbcType=&quot;INTEGER&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;result&nbsp;column=&quot;username&quot;&nbsp;property=&quot;username&quot;&nbsp;jdbcType=&quot;VARCHAR&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;result&nbsp;column=&quot;password&quot;&nbsp;property=&quot;password&quot;&nbsp;jdbcType=&quot;VARCHAR&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&lt;/resultMap&gt;\r\n&nbsp;&nbsp;&lt;select&nbsp;id=&quot;getUser&quot;&nbsp;parameterType=&quot;com.test.entity.User&quot;&nbsp;resultMap=&quot;UserMap&quot;&gt;\r\n&nbsp;&nbsp;	select&nbsp;*&nbsp;from&nbsp;user&nbsp;where&nbsp;username=#{username}&nbsp;and&nbsp;password=#{password};\r\n&nbsp;&nbsp;&lt;/select&gt;\r\n&lt;/mapper&gt;</pre><p>由于是测试用 就不新建service了<br/></p><p>接下来在com.test.action 新建UserAction</p><pre class=\"brush:java;toolbar:false\">@Controller\r\n@RequestMapping(&quot;/user&quot;)\r\npublic&nbsp;class&nbsp;UserAction&nbsp;{\r\n	@Resource\r\n	private&nbsp;UserMapper&nbsp;userMapper;\r\n\r\n	@RequestMapping(&quot;/login&quot;)\r\n	private&nbsp;String&nbsp;login(User&nbsp;user)&nbsp;{\r\n		User&nbsp;user2&nbsp;=&nbsp;userMapper.getUser(user);\r\n		if&nbsp;(user2!=null)&nbsp;{\r\n			return&nbsp;&quot;success&quot;;\r\n		}\r\n		return&nbsp;&quot;error&quot;;\r\n	}\r\n}</pre><p>稍微修改一下index.jsp 加入form表单</p><pre class=\"brush:html;toolbar:false\">&nbsp;&lt;form&nbsp;action=&quot;user/login.action&quot;&nbsp;method=&quot;post&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;username&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;password&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;	&lt;input&nbsp;type=&quot;submit&quot;&nbsp;value=&quot;登录&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&lt;/form&gt;</pre><p>在WEB-INF/jsp 新建success.jsp error.jsp (注意 这里新建文件的位置由你配置的视图解析器决定) 做为成功和失败的跳转</p><p>然后启动项目</p><p><img src=\"upload/image/20170525/1495698376124066027.png\" title=\"1495698376124066027.png\" alt=\"start.png\"/></p><p>ok!启动正常</p><p>浏览器中输入127.0.0.1:8080/webproject 输入正确的username和password就可以跳转到success.jsp 了&nbsp;</p><p>到此结束 撒花~~~<img src=\"http://img.baidu.com/hi/jx2/j_0007.gif\"/></p>',9,'\0'),('置顶:网站介绍','b3f20643ec4e4454beef840c17d944d1','2017-05-25 04:38:59','#网站介绍#hr点这里',9,0,'<p>您好!如果您是hr 我就不耽误您的时间了 点击<a href=\"http://www.ggblog.wang/admin.action\" target=\"_blank\" title=\"后台管理\" style=\"white-space: normal;\">这里</a>进入本站的后台管理。您关心的功能都在那里，超级管理员账号:admin 密码:********<br/></p><p>数据已做过备份，请放心更改，但是尽量不要进行删除操作</p><p>后台管理有权限控制(其实可以细化到某个点的 但是本站也没有什么可以控制权限的地方)和对博文等的基础操作</p><p><br/></p><p>好了，接下来是网站介绍</p><p>网站的左边显而易见是博文 就不多做介绍啦<br/></p><p>右边是这样的设计</p><p><img src=\"upload/image/20170525/1495686659560090368.png\" title=\"1495686659560090368.png\" alt=\"下载.png\"/></p><p>最顶上是我的个人介绍</p><p>文以类聚 是博文的分类</p><p>炙手可热 是浏览次数最多的几个博客</p><p>上上签儿 是我的个人标签</p><p><br/></p><p>网页的顶部</p><p><img src=\"upload/image/20170525/1495687034771062535.png\" title=\"1495687034771062535.png\" alt=\"无标题.png\"/></p><p>关于本站:对本站使用到技术介绍</p><p>留言墙:可以进行留言 和对其他留言的回复 每留一次言 都会有一份邮件发给你</p><p>搜索框:可以搜索博文的标题</p><p>其他的想到再说吧</p><p><br/></p>',7,'');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `classify`
--

DROP TABLE IF EXISTS `classify`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `classify` (
  `classify_id` int(11) NOT NULL AUTO_INCREMENT,
  `classify_name` varchar(255) DEFAULT NULL COMMENT '文章分类名',
  PRIMARY KEY (`classify_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `classify`
--

LOCK TABLES `classify` WRITE;
/*!40000 ALTER TABLE `classify` DISABLE KEYS */;
INSERT INTO `classify` VALUES (2,'技术分享'),(3,'闲聊'),(7,'网站介绍'),(9,'框架整合'),(10,'java'),(11,'编程知识');
/*!40000 ALTER TABLE `classify` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `comment_id` varchar(32) NOT NULL COMMENT '评论id',
  `comment_content` varchar(200) DEFAULT NULL COMMENT '评论内容',
  `comment_date` datetime DEFAULT NULL COMMENT '评论时间',
  `comment_email` varchar(50) DEFAULT NULL COMMENT '评论邮箱',
  `comment_name` varchar(10) DEFAULT NULL,
  `com_art_id` varchar(32) DEFAULT NULL COMMENT '该评论回复的文章id',
  `father_comment_id` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `FK_Com_Art_Id` (`com_art_id`),
  KEY `FK_Father_Comment` (`father_comment_id`),
  CONSTRAINT `FK_Father_Comment` FOREIGN KEY (`father_comment_id`) REFERENCES `comment` (`comment_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_Com_Art_Id` FOREIGN KEY (`com_art_id`) REFERENCES `article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES ('84ef45e0778b4713b3fb63ee290ccefe','测试回复','2017-05-25 07:58:24','975233567@qq.com','测试回复','b3f20643ec4e4454beef840c17d944d1',NULL);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `introduction`
--

DROP TABLE IF EXISTS `introduction`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `introduction` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `introduction` varchar(500) NOT NULL COMMENT '自我介绍',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `introduction`
--

LOCK TABLES `introduction` WRITE;
/*!40000 ALTER TABLE `introduction` DISABLE KEYS */;
INSERT INTO `introduction` VALUES (1,'hello!欢迎光临我的个人博客站,这是我记录学习的地方,也欢迎大神来给我提意见,如果您是hr请查看置顶博文,里面有进入后台管理的账号和密码....');
/*!40000 ALTER TABLE `introduction` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `leavemsg`
--

DROP TABLE IF EXISTS `leavemsg`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `leavemsg` (
  `lm_id` varchar(32) NOT NULL COMMENT '留言',
  `lm_content` varchar(500) DEFAULT NULL COMMENT '留言内容',
  `lm_email` varchar(50) DEFAULT NULL,
  `lm_name` varchar(10) DEFAULT NULL,
  `lm_date` datetime DEFAULT NULL,
  `lm_fatherId` varchar(32) DEFAULT NULL COMMENT '该留言回复的留言 0 代表根留言',
  PRIMARY KEY (`lm_id`),
  KEY `FK_lm_fatherId` (`lm_fatherId`),
  CONSTRAINT `FK_lm_fatherId` FOREIGN KEY (`lm_fatherId`) REFERENCES `leavemsg` (`lm_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `leavemsg`
--

LOCK TABLES `leavemsg` WRITE;
/*!40000 ALTER TABLE `leavemsg` DISABLE KEYS */;
INSERT INTO `leavemsg` VALUES ('efa85d390c774804814ca8ee42da3ad4','欢迎光临我的个人博客站 有什么意见或建议 都可以在这里留言','1191472467@qq.com','网站管理员','2017-05-25 03:50:53',NULL);
/*!40000 ALTER TABLE `leavemsg` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `per_role`
--

DROP TABLE IF EXISTS `per_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `per_role` (
  `t_role_id` varchar(32) NOT NULL,
  `t_per_id` varchar(32) NOT NULL,
  PRIMARY KEY (`t_role_id`,`t_per_id`),
  KEY `FK_per` (`t_per_id`),
  CONSTRAINT `FK_per` FOREIGN KEY (`t_per_id`) REFERENCES `permission` (`per_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_per_role` FOREIGN KEY (`t_role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `per_role`
--

LOCK TABLES `per_role` WRITE;
/*!40000 ALTER TABLE `per_role` DISABLE KEYS */;
INSERT INTO `per_role` VALUES ('1','1'),('3','1'),('1','2'),('1','3'),('3','3'),('1','4'),('3','4'),('1','5'),('3','5'),('1','6'),('3','6'),('1','7'),('3','7');
/*!40000 ALTER TABLE `per_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permission`
--

DROP TABLE IF EXISTS `permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `permission` (
  `per_id` varchar(32) NOT NULL DEFAULT '',
  `permissions` varchar(15) DEFAULT NULL COMMENT '权限',
  `per_code` varchar(20) DEFAULT NULL COMMENT '权限代码',
  PRIMARY KEY (`per_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permission`
--

LOCK TABLES `permission` WRITE;
/*!40000 ALTER TABLE `permission` DISABLE KEYS */;
INSERT INTO `permission` VALUES ('1','用户管理','user'),('2','角色管理','role'),('3','文章分类管理','classify'),('4','评论管理','comment'),('5','留言管理','leaveMsg'),('6','关于网站设置','about'),('7','个人描述设置','introduction');
/*!40000 ALTER TABLE `permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role`
--

DROP TABLE IF EXISTS `role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `role` (
  `role_id` varchar(32) NOT NULL DEFAULT '',
  `role_name` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role`
--

LOCK TABLES `role` WRITE;
/*!40000 ALTER TABLE `role` DISABLE KEYS */;
INSERT INTO `role` VALUES ('1','超级管理员'),('3','测试角色2'),('4','测试角色');
/*!40000 ALTER TABLE `role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_id` varchar(32) NOT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password` varchar(50) DEFAULT NULL,
  `createDate` datetime DEFAULT NULL,
  `user_state` bit(1) DEFAULT NULL COMMENT '用户状态 1 启用 0 失效',
  `user_email` varchar(50) DEFAULT NULL COMMENT '用户邮箱',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES ('6a8873ae978e4705b34a64539af57c6a','admin','ggblogadmin','2017-05-25 03:45:42','','wang1386528@gmail.com'),('83f007188b6c4052b0eb15579d0173bd','test','testtest','2017-05-15 23:51:03','','test@qq.com');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_role`
--

DROP TABLE IF EXISTS `user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_role` (
  `t_user_id` varchar(32) NOT NULL,
  `t_role_id` varchar(32) NOT NULL,
  PRIMARY KEY (`t_user_id`,`t_role_id`),
  KEY `FK_Role` (`t_role_id`),
  CONSTRAINT `FK_Role` FOREIGN KEY (`t_role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_User` FOREIGN KEY (`t_user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_role`
--

LOCK TABLES `user_role` WRITE;
/*!40000 ALTER TABLE `user_role` DISABLE KEYS */;
INSERT INTO `user_role` VALUES ('6a8873ae978e4705b34a64539af57c6a','1'),('83f007188b6c4052b0eb15579d0173bd','4');
/*!40000 ALTER TABLE `user_role` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-05-25 11:30:10
